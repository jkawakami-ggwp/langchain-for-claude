---
description: コミットメッセージのフォーマットルール
globs:
alwaysApply: true
---

# コミットメッセージのフォーマットルール

## 基本フォーマット
```
<type>(<scope>): <subject>

<body>

<footer>
```

## Type（必須）
- **feat**: 新機能の追加
- **fix**: バグ修正
- **docs**: ドキュメントの変更
- **style**: コードの意味に影響しない変更（空白、フォーマット、セミコロンの欠落など）
- **refactor**: バグ修正や機能追加ではないコードの変更
- **perf**: パフォーマンス向上のためのコードの変更
- **test**: テストの追加や既存テストの修正
- **chore**: ビルドプロセスや補助ツールの変更

## Scope（任意）
変更の影響範囲を示す（例：auth, api, ui, config）

## Subject（必須）
- 50文字以内
- 現在形の動詞で開始
- 最初の文字は小文字
- 末尾にピリオドを付けない
- 日本語または英語で記述

## Body（任意）
- 変更の理由と内容を詳細に説明
- 72文字で改行
- 何を変更したかではなく、なぜ変更したかを説明

## Footer（任意）
- Breaking changes: `BREAKING CHANGE: 説明`
- Issue参照: `Closes #123`, `Fixes #456`

## 例
```
feat(auth): ユーザー認証機能を追加

JWT トークンベースの認証システムを実装
- ログイン/ログアウト機能
- トークンの自動更新
- 認証状態の管理

Closes #123
```

```
fix: APIレスポンスのnull値エラーを修正

レスポンスデータがnullの場合の適切な処理を追加
```
