---
description: コマンド実行に関するルール
globs:
alwaysApply: true
---

# コマンド実行ルール

## パッケージマネージャー
- **必ずpnpmを使用すること**
- npm や yarn は使用しない
- 例：`pnpm install`, `pnpm run dev`, `pnpm add package-name`

## 実行環境

### Git関連のコマンド
- **Git関連のコマンドは必ずホスト環境で実行すること**
- 対象コマンド：`git`, `git commit`, `git add`, `git push`, `git pull`, `git status` など
- 例：`git add .`, `git commit -m "feat: 新機能を追加"`, `git push`

### その他のコマンド（Node.js、pnpm、開発関連）
- **すべてのコマンドはコンテナ内で実行すること**
- **ホスト環境での直接実行は禁止**
- Docker Composeを使用してコンテナ内でコマンドを実行する
- 例外なく、必ず `docker-compose exec app` を使用してコマンドを実行する

## 実行例

### Git操作（ホスト環境）
```bash
# ファイルをステージングに追加
git add .

# コミット
git commit -m "feat: 新機能を追加"

# プッシュ
git push origin main

# ステータス確認
git status
```

### 開発コマンド（コンテナ内）
```bash
# 依存関係のインストール
docker-compose exec app pnpm install

# 開発サーバーの起動
docker-compose exec app pnpm run dev

# パッケージの追加
docker-compose exec app pnpm add package-name

# テストの実行
docker-compose exec app pnpm test

# リンター実行
docker-compose exec app pnpm lint

# フォーマッター実行
docker-compose exec app pnpm format
```

## 注意事項
- コンテナが起動していない場合は、まず `docker-compose up -d` でコンテナを起動する
- 新しいパッケージを追加した場合は、コンテナを再ビルドすることを検討する
- **⚠️ 重要：Git関連以外のコマンドをホスト環境で直接実行することは厳禁**
- **⚠️ 特に `pnpm install` や `npm` などのNode.js関連コマンドは必ずコンテナ内で実行すること**

## コマンド実行場所の判断
| コマンド種別 | 実行場所 | 例 |
|------------|---------|-----|
| Git操作 | ホスト | `git add`, `git commit`, `git push` |
| Node.js/pnpm | コンテナ | `docker-compose exec app pnpm install` |
| リント/フォーマット | コンテナ | `docker-compose exec app pnpm lint` |
| テスト | コンテナ | `docker-compose exec app pnpm test` |
| ビルド | コンテナ | `docker-compose exec app pnpm build` |
| Docker操作 | ホスト | `docker-compose up -d`, `docker-compose down` |
